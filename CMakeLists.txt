cmake_minimum_required(VERSION 3.2)
option(USE_SANITIZERS "sanitizers" ON)

if(MSVC)
	set(CMAKE_C_FLAGS "/Wall")
	if(${USE_SANITIZERS})
		set(CMAKE_C_FLAGS "/fsanitize=address")
	endif()
elseif()
	set(CMAKE_C_FLAGS "-Wall")
	set(CMAKE_C_FLAGS "-Wpedantic")
	if(${USE_SANITIZERS})
	endif()
endif()
file(GLOB image "src/types.c" 
	"src/iofile.c" "src/image.c")

add_executable(enc "src/enc.c")
add_executable(dec "src/dec.c")
add_executable(edges "src/edges_detection.c")
add_executable(dct "src/dct_test.c")

add_library( kczi  SHARED ${image})

target_sources(enc PUBLIC ${image})
target_sources(dec PUBLIC ${image})
target_sources(edges PUBLIC ${image})
target_sources(dct PUBLIC ${image})


if(UNIX)
	target_link_libraries(dec SDL2 SDL2_image zstd m)
	target_link_libraries(enc SDL2 SDL2_image zstd m)
	target_link_libraries(edges SDL2 SDL2_image zstd m)
	target_link_libraries(kczi SDL2 SDL2_image zstd m)
	target_link_libraries(dct SDL2 SDL2_image zstd m)
elseif(WIN)
	target_link_libraries(dec SDL2main SDL2 SDL2_image libzstd_static)
	target_link_libraries(enc SDL2main SDL2 SDL2_image libzstd_static)
	target_link_libraries(edges SDL2main SDL2 SDL2_image libzstd_static)
	target_link_libraries(kczi SDL2main SDL2 SDL2_image libzstd_static)
	target_link_libraries(dct SDL2main SDL2 SDL2_image libzstd_static)

	if(MSVC)
	elseif()
		target_link_libraries(dec mingw32)
		target_link_libraries(enc mingw32)
		target_link_libraries(edges mingw32)
		target_link_libraries(dct mingw32)
		target_link_libraries(kczi mingw32)
	endif()
endif()